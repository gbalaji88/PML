swirl
swirl()
library(swirl)
ls()
rum(list=ls())
rm(list=ls())
swirl()
tf
num_vect>=6
my_char = c("My","name","is")
my_char <-c("My","name","is")
my_char
paste(my_char,collapse="")
paste(my_char,collapse=" ")
my_name <- c(my_char,"Balaji")
my_name
paste(my_name,collapse = " ")
paste("Hello","world",sep = " ")
paste("Hello","world!",sep = " ")
paste(c("X","Y","Z"),1:3,sep = "")
paste(1:3c("X","Y","Z"),sep = "")
paste(1:3,c("X","Y","Z"),sep = "")
paste(LETTERS,1:4,sep = "-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(s)]
y<-x[!is.na(sx)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x(c(3,5,7))
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
swirl()
library("swirl", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ls()
rm(list=ls())
swirl()
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
?read.csv
mydf = read.csv(path2csv,stringAsFactors=false)
mydf = read.csv(path2csv,stringAsFactors=FALSE)
swirl()
mydf = read.csv(path2csv,stringsAsFactors=FALSE)
mydf <- read.csv(path2csv,stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
system.file("examples,package="shiny"")
system.file("examples,package="shiny")
system.file("examples",package="shiny")
runExample("02_text")
runExample("05_sliders")
?fft
runExample("05_sliders")
runExample("10_download")
?spectrum
install.packages("rdrop2")
source('~/Documents/Coursera/DevelopingDataProducts/Untitled.R')
install.packages("signal")
library("signal")
source('~/Documents/Coursera/DevelopingDataProducts/Untitled.R')
plot(wav)
install.packages("dygraphs")
library(dygraphs)
lungDeaths <- cbind(mdeaths, fdeaths)
dygraph(lungDeaths) %>% dyRangeSelector()
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-2')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
?par
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
?specgram
?length
length(cran)
length(wav$sound)
c(1,2,3,4)
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
lungDeaths <- cbind(mdeaths, fdeaths)
> dygraph(lungDeaths) %>% dyRangeSelector()
lungDeaths <- cbind(mdeaths, fdeaths)
par(mfcol = c(1,2));p1 = dygraph(lungDeaths) %>% dyRangeSelector()
lungDeaths <- cbind(mdeaths, fdeaths)
par(mfcol = c(1,2));p1 = dygraph(lungDeaths) %>% dyRangeSelector()
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-2')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-2')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
list(wav$sound)
lines(wav$sound)
plot(wav$sound)
plot.ts(wav$sound)
?plot.ts
as.ts(wav$sound)
plot.ts(as.ts(wav$sound))
plot(wav$sound)
plot(wav$sound)
plot(wav$sound)
plot(wav$sound)
plot(wav$sound)
plot(wav$sound[])
plot(wav$sound[,])
plot(wav$sound[,])
?plot
plot(wav$sound[,],type=="l")
plot(wav$sound[,],type="l")
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
?plot
?plot
1:10
0:length(wav$sound)/Fs/60
0:length(wav$sound)/Fs
length(0:length(wav$sound)/Fs)
length(wav$sound)
length(0:length(wav$sound)/Fs-1)
length(0:(length(wav$sound)/Fs)-1)
length((0:length(wav$sound)/Fs)-1)
length(0:length(wav$sound)/Fs)
length(0:length(wav$sound[,-1])/Fs)
length(0:length(wav$sound[-1])/Fs)
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
soundwave <- wav$sound;
0:(length(soundwave[-1])/Fs/60
0:(length(soundwave[-1])/Fs/60)
0:(length(soundwave[,-1])/Fs/60)
0:(length(soundwave)/Fs/60)
0:length(soundwave)-1
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
length((0:length(soundwave)-1)/Fs/60)
length(soundwave)
length(soundwave)-1
0:(length(soundwave)-1)
b<-(0:(length(soundwave)-1))/Fs/60;
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/App-1')
devtools::install_github('rstudio/shinyapps')
library(devtools)
library("devtools")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='gbalaji',
token='C15608BC838E1954A22CFDC5B0BD681E',
secret='<SECRET>')
shinyapps::setAccountInfo(name='gbalaji', token='C15608BC838E1954A22CFDC5B0BD681E', secret='xRqJSdeyvBTrdZ1mHJrAZZX/n1R104RGkbxKixa8')
library(shinyapps)
shinyapps::deployApp('~/Documents/Coursera/DevelopingDataProducts/SpecProject/')
library(shiny)
deployApp()
library(shinyapps)
deployApp()
shiny::runApp('Documents/Coursera/DevelopingDataProducts/SpecProject')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/SpecProject')
shiny::runApp('Documents/Coursera/DevelopingDataProducts/SpecProject')
deployApp()
shinyapps::deployApp('~/Documents/Coursera/DevelopingDataProducts/SpecProject/')
shinyapps::deployApp('~/Documents/Coursera/DevelopingDataProducts/SpecProject/')
shinyapps::deployApp('~/Documents/Coursera/DevelopingDataProducts/SpecProject/')
library(shinyapps)
shinyapps::deployApp('~/Documents/Coursera/DevelopingDataProducts/SpecProject/')
library(slidify)
library('slidify')
library(devtoold)
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibraries','ramnathv')
library('slidify')
setwd('~/Documents/Coursera/DevelopingDataProducts/SpecProject/')
author('SpectrogramProject')
slidify("index.Rmd")
library(knitr)
install.packages("knitr")
install.packages("knitr")
author('SpectrogramProject')
library(slidify)
author('SpectrogramProject')
author('SpectrogramProject')
source('~/Documents/Coursera/DevelopingDataProducts/test.R')
source('~/Documents/Coursera/DevelopingDataProducts/test.R')
source('~/Documents/Coursera/DevelopingDataProducts/test.R')
source('~/Documents/Coursera/DevelopingDataProducts/test.R')
getwd
getwd()
setwd("~/Documents/Coursera/DevelopingDataProducts/SlidifyProject/")
author("SpectrogramProject")
slidify("index.Rmd")
slidify("index.Rmd")
install_version("stringr", version="0.6.2", type = "source")
install_github('ramnathv/slidify', ref = github_pull(425))
library('devtools')
install_github('ramnathv/slidify', ref = github_pull(425))
slidify("index.Rmd")
publish(title = 'Spectrogram-Slidify', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Spectrogram-Slidify', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Spectrogram-Slidify', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Spectrogram-Slidify', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Spectrogram-Slidify', 'index.html', host = 'rpubs')
slidify("index.Rmd")
publish(title = 'Spectrogram-Slidify', 'index.html', host = 'rpubs')
publish(title = 'Spectrogram-Slidify', 'index.html', host = 'rpubs')
install.packages("utils")
install.packages {utils}
install.packages{utils}
install.packages(utils)
library(help="utils")
library("utils")
setInternet2(TRUE)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
?fread
??fread
library(data.table)
library(utils)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
?fread
update.packages()
y
library(data.table)
library(utils)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
?fread
# If you would like to revert back to CRAN version
remove.packages("data.table")         # First remove the current version
install.packages("data.table")        # Then install the CRAN version
install.packages("data.table")
library(data.table)
library(utils)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- read.csv(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- read.table(url)
library(data.table)
library(utils)
url <- "http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- read.table(url)
View(D)
View(D)
install.packages("doParallel")
setwd("~/Documents/Coursera/PracticalMachineLearning/PredictionProject/")
trainControl
library(knitr); knit()
library(knitr)
getwd()
cd(getwd())
dir(getwd())
knitr::knit2html('PredictionAssignment.Rmd')
library(knitr)
install.packages("knitr")
install.packages("knitr")
